{"version":3,"sources":["assets/compass.svg","assets/ship.svg","Component/Modal.js","Component/Haiku.js","Component/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Modal","props","react_default","a","createElement","className","style","transform","show","display","children","onClick","close","Haiku","cancel","refresh","Instructions","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToElement","window","scrollTo","containerRef","current","offsetTop","closeModalHandler","setState","isShowing","openPoem","showPoem","closePoem","refreshPage","location","reload","getUserWord","seedWord","state","toLowerCase","axios","url","concat","method","dataResponse","then","response","word","data","numSyllables","Swal","fire","type","text","newWholeHaiku","toConsumableArray","wholeHaiku","push","getWordSuggestions","distributeSyllables","catch","undefined","previousWord","syllableFilter","RegEx","filterPunctuation","filter","hit","test","wordOptionsArray","i","filteredWordOptions","element","grabThree","fullWordOptionsArray","currentThreeBoatWords","wordOptions","getShipWords","responseTwo","filterdSyllables","result","allBoatWords","topThree","length","randIndex","Math","floor","random","splice","handleSubmit","e","preventDefault","setTimeout","handleChange","event","target","value","buttonWordChoice","index","newWord","countSyllables","haikuArray","reduce","total","lineOne","lineTwo","lineThree","forEach","count","haikuSlice","slice","sliceSyllables","removeLastWord","wholeHaikuCopy","pop","newLastWord","syllableDisplay","currentLine","lineOneEmpty","lineOneFull","lineTwoFull","lineThreeFull","syllablesRemain","convertHaikuToString","map","elt","joinedLine","join","renderHaiku","currentMatches","showFinishedHaiku","React","createRef","_this2","Component_Modal","Component_Instructions","src","compass","alt","id","action","onSubmit","htmlFor","onChange","placeholder","name","disabled","ship","ref","key","Component_Haiku","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df0e437a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/compass.fd75e46c.svg\";","module.exports = __webpack_public_path__ + \"static/media/ship.35f2f9f9.svg\";","import React from 'react';\n\nconst Modal = (props) => {\n    return (\n        <div className=\"instructionWrapper\">\n            <div className=\"modalWrapper\"\n                style={{\n                    transform: props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                    display: props.show ? 'inline-block' : 'none'\n                }}>\n               \n                <div className=\"modalBody\">\n                    <div>\n                        {props.children}\n                    </div>\n                </div>\n                <div className=\"buttonContainer\">\n                    <button className=\"btnCancel\" onClick={props.close}>Sails Away</button>\n                    \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal;\n","import React from 'react';\n\nconst Haiku = (props) => {\n    return (\n        <div className=\"haikuModal\">\n            <div className=\"haikuBody\"\n                style={{\n                    transform: props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                    display: props.show ? 'block' : 'none'\n                }}>\n                <div className=\"haikuHeader\">\n                    <h3>Haiku</h3>\n                    <span className=\"closeHaikuBtn\" onClick={props.cancel}>×</span>\n                </div>\n                <div className=\"haikuContent\">\n                    <div>\n                        {props.children}\n                    </div>\n                    <div className=\"haikuFooter\">\n                        <button className=\"btnContinue\" onClick={props.refresh}>Start Over</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Haiku;\n\n","import React, {Component} from 'react';\r\n\r\nclass Instructions extends Component {\r\n\r\n    render() {\r\n\r\n        return(\r\n           \r\n            \r\n                <div className=\"Instructions\">\r\n                    <h1>Haikus Ahoy!</h1>\r\n                    <p><span>Ahoy Matey!</span> Welcome aboard our boat-themed haiku generator of the High Seas. <span>Argh!</span></p>\r\n                    <p>A haiku is <span>a Japanese poem meant to evoke an image. It is </span>composed of three lines which have a syllable count of 5-7-5. Type a starting word below and a list of words will generate for you to choose from until the poem is done. If you don't like how your poem is going, you can delete the most recent word you added and you'll get a fresh list of options.</p>\r\n                </div>   \r\n         \r\n        )\r\n    }\r\n}\r\n\r\nexport default Instructions;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Modal from './Component/Modal.js';\nimport Haiku from './Component/Haiku.js';\nimport Swal from 'sweetalert2';\nimport Instructions from './Component/Instructions.js';\nimport compass  from './assets/compass.svg';\nimport ship from './assets/ship.svg'\nimport './App.css';\n\nclass App extends Component {\n  // tiny change to see \n  constructor() {  \n    super();\n    //set states\n    this.state = {\n      //state for each line\n      lineOne:[],\n      lineTwo:[],\n      lineThree:[],\n      //state for whole haiku\n      wholeHaiku: [],\n      //state for user word\n      getUserWord: [],\n      //state for the word that populates the next word options\n      seedWord: '',\n      //state for all the boat words called\n      allBoatWords:[],\n      //state for the next word options\n      wordOptions: [],\n      //state for the current matches of the next words\n      currentMatches: [],\n      //state for the three boat words that will be added\n      currentThreeBoatWords: [],\n      //state for the syllable counter\n      syllableFilter: 4,\n      //states for the modals to show and not show\n      isShowing: false,\n      showFinishedHaiku: false,\n      showPoem: false,\n    }\n    //create ref object for scroll\n    this.containerRef = React.createRef();\n  }\n\n  //calling the function of the axios call for all the ship words that we pull three at a time from \n  componentDidMount(){\n    this.getShipWords();\n    this.setState ({\n      isShowing:true,\n    })\n  }\n\n  //smooth scroll\n  scrollToElement = () => {\n    window.scrollTo(0, this.containerRef.current.offsetTop);\n  }\n\n  //functions for modals for instructions and poem at end\n  closeModalHandler = () => {\n    this.setState({\n      isShowing: false\n    });\n  }\n\n  openPoem = () =>{\n    this.setState({\n      showPoem:true,\n    })\n  }\n  closePoem = () =>{\n    this.setState({\n      showPoem: false,\n    })\n  }\n   refreshPage = () => {\n     window.location.reload(); \n   }\n\n\n  // function to get the user input, which makes the API call to the Datamuse API\n  getUserWord = () => {\n    const seedWord = this.state.seedWord.toLowerCase();\n   \n\n  // API call to Datamuse to get the syllable count for the user input, and to error handle potential spelling mistakes\n  axios({\n    url: `https://api.datamuse.com/words?md=s&sp=${seedWord}`,\n    method: 'GET',\n    dataResponse: 'jsonp',\n    })\n    // a promise to return a successful or unsuccessful API call\n    .then(response => {\n      // a variable to store the data from the API\n      response = response.data;\n      // a variable to error handle if word is spelled wrong, and get the first word in the array of suggested correct spellings\n      const word = response[0].word;\n      // a variable to store the number of syllables value from the first entry in the array\n      const numSyllables = response[0].numSyllables;\n      // if the user input word is less than 6 syllables\n      if (seedWord === word && numSyllables < 6) {\n        // a variable that holds a copy of the line one array in state\n        const newWholeHaiku = [...this.state.wholeHaiku];\n        // pushes the word and number of syllables values of the user input word to the newWholeHaiku array\n        newWholeHaiku.push({ 'word': word, 'numSyllables': numSyllables})\n        this.getWordSuggestions(word); \n        // sets state of wholeHaiku to be equal to the value of newWholeHaiku, reset user input to nothing \n        this.setState({\n          wholeHaiku: newWholeHaiku,\n          seedWord: ''\n        },\n          this.distributeSyllables);\n        // if the user's word has too many syllables, prompt an error\n      } else if (seedWord === word && numSyllables > 5) {\n        Swal.fire({\n          type: 'error',\n          text: 'Please enter a word that is less than 5 syllables',\n        })\n        return;\n        // error handling for if the user misspells their word\n      } else {\n        Swal.fire({\n          type: 'error',\n          text: `It looks like you meant to type \"${word}\". Please try again.`,\n        })\n        return;\n      }\n        // more error handling - if word cannot be found, or is spelled too incorrectly to be recognized\n    }).catch((response) => {\n      if (seedWord === undefined || seedWord === \"\" || seedWord ===\" \") {\n        Swal.fire({\n          type: 'error',\n          text: `Please type in a word to get started.`,\n        })\n      } \n      else {\n        Swal.fire({\n          type: 'error',\n          text: `Sorry, ${seedWord} is not a word that I know. If it looks like a word it is also possible that the data manager is not working in which case, please check back later!`,\n        })\n      }\n      \n    })\n  }\n\n  //Get a second API call for words that might follow seedWord in a sentence\n  getWordSuggestions = (previousWord) => {\n    //call Axios\n    axios({\n      url: `https://api.datamuse.com/words?lc=${previousWord}&md=s`,\n      method: 'GET',\n      dataResponse: 'jsonp',\n    })\n    // a promise to return a successful or unsuccessful API call\n    .then((response) => {\n      //copying syllable filter, which is set to 4 in state\n      const syllableFilter = this.state.syllableFilter;\n      //creating a variable for numbers\n      const RegEx = /1|2|3|4|5|6|7|8|9|0/\n      //filtering out punctuation and making sure the words being generated are less than the sylable filter based on the conditionals in the syllableFilter below\n      const filterPunctuation = response.data.filter((hit) => {\n        return !RegEx.test(hit.word) && hit.word !== \".\" && hit.numSyllables <= syllableFilter;\n      })\n      //Create an empty word array\n      const wordOptionsArray = [];\n      //push the filteredPunctuation words into the wordOptionsArray\n      for(let i = 0; i < 7; i++){\n        wordOptionsArray.push(filterPunctuation[i])\n      }\n      // filter undefined hits\n      const filteredWordOptions = wordOptionsArray.filter(element => {\n        return element !== undefined;\n      });\n      //grabbing threeBoatWords from below, and concatonating them to the filteredWordOptions to display for the user to pick from \n      this.grabThree();\n      const fullWordOptionsArray = filteredWordOptions.concat(this.state.currentThreeBoatWords);\n      //setting state of wordOptions to fullWordOptionsArray\n      this.setState({\n        wordOptions: fullWordOptionsArray,\n      })\n    })\n    //error checking \n    .catch(() => {\n      Swal.fire({\n        type: 'error',\n        text: `We're sorry, we're having some issues with our data manager. Please check back later!`,\n      })\n    })\n  }\n  //a third API call to get some words related to boats\n  getShipWords = () => {\n    axios({\n      url: `https://api.datamuse.com/words?topics=boat&md=s&max=1000`,\n      method: 'GET',\n      dataResponse: 'jsonp',\n    // a promise to return a successful or unsuccessful API call\n    }).then((responseTwo) => {\n      //filtering the results based on the conditional filter of syllables below\n      const filterdSyllables = responseTwo.data.filter(result => {\n        return result.numSyllables < 4\n      })\n      //setState of allBoatWords to the filteredSyllables boat words\n      this.setState({\n        allBoatWords: filterdSyllables,\n      }, () => {\n        //callgrabThree function to insure it is called only when API call is successsful\n        this.grabThree();\n      }\n      )\n    })\n  }\n  //grab three boat words form the one API call on componentDidMount\n  grabThree = ()=>{\n    //a copy of allBoatWrods\n    const allBoatWords = [...this.state.allBoatWords];\n    //a copy of syllableFitler\n    const syllableFilter = this.state.syllableFilter;\n    //filtering the boat words based on how many syllables are reuqired based on how many syllables are left per line for the user\n    const filterdSyllables = allBoatWords.filter(result => {\n      return result.numSyllables <= syllableFilter;\n      } )\n    //a variable for the top three random words\n    const topThree = [];\n    //a for loop to filter through the array\n    for (let i = 0; i < 3; i++) {\n      //if the array returns less than one words, break \n      if (filterdSyllables.length < 1) {\n        break\n      } else {\n        //otherwise create a variable for length\n        const length = filterdSyllables.length;\n        //create a variable for randomIndex\n        const randIndex = Math.floor(Math.random() * length);\n        //push the three random boat words to topThree\n        topThree.push(filterdSyllables.splice(randIndex, 1)[0]);\n        }\n    }\n    this.setState({\n      //set the state for currentThreeBoatWords to topThree\n      currentThreeBoatWords: topThree\n    })\n    return topThree;\n  }\n\n  // click event for our button\n  handleSubmit = (e) => {\n    // prevents default action\n    e.preventDefault();\n    // calls the getUserInput function, which calls the API\n    this.getUserWord();\n    \n    setTimeout(()=>{\n      // run this method to execute scrolling.\n      this.scrollToElement();\n    }, 100)\n  }\n\n  // keeps track of the user's keystrokes in the input field\n  handleChange = (event) => {\n    // sets state of seedWord according to the user's input\n    this.setState({\n      seedWord: event.target.value\n    }) \n  }\n\n  //adds the selected button to the line one array\n  buttonWordChoice = (event, index) => {\n    //event prevent default\n    event.preventDefault();\n    //saving line one in a copy\n    const wholeHaiku = [...this.state.wholeHaiku]\n    //creating a variable for the new word\n    const newWord = this.state.wordOptions[index]\n    //push the new word to the wholeHaiku array\n    wholeHaiku.push(newWord)\n    //set state so that wholeHaiku is the new wholeHaiku and seedWord is the newWord's property of word\n    this.setState ({\n      wholeHaiku: wholeHaiku,\n      // seedWord: newWord.word,\n      seedWord: '',\n      }, \n      //doing a callback to the getWordSuggestions so we can repopulate the options\n      () => {\n        //call get word suggestions to repopulate the next word options \n        this.getWordSuggestions(newWord.word)\n        //calling the function to count syllables\n        this.distributeSyllables();\n      }\n    )\n  }\n\n  //sends the number of syllables to the wholeHaikuSyllables array\n  countSyllables = (haikuArray) => {\n    const syllableReduce = haikuArray.reduce((total, word) =>{\n      return total + word.numSyllables\n    }, 0 )\n    return syllableReduce\n  }\n  \n  //a function to check the syllable count of each line and push the lines to the state\n  distributeSyllables = () => {\n    //a copy of whole Haiku\n    const wholeHaiku = [...this.state.wholeHaiku];\n    //save an array for each line\n    const lineOne =[];\n    const lineTwo =[];\n    const lineThree= [];\n    //create a variable to start the syllable count at four\n    let syllableFilter = 4;\n    //going through the wholeHaiku, which is the created Haiku thus far at any given moment\n    wholeHaiku.forEach((count, i) => {\n      //grab a slice of wholeHaiku so we can count the number of syllables\n      const haikuSlice = wholeHaiku.slice(0, i+1);\n      const sliceSyllables = this.countSyllables(haikuSlice);\n      \n      //depending on our current number of syllables, push the word to the matching line \n      //also calculate the number of syllables remaining for that line\n      if (sliceSyllables < 6){\n        lineOne.push(wholeHaiku[i]);\n        syllableFilter = 5 - this.countSyllables(lineOne);\n      } else if (sliceSyllables < 13){\n        lineTwo.push(wholeHaiku[i])\n        syllableFilter = 7 - this.countSyllables(lineTwo);\n      } else if (sliceSyllables < 18){\n        lineThree.push(wholeHaiku[i])\n        syllableFilter = 5 - this.countSyllables(lineThree);\n      } \n      //when the syllable filter is less than 1, rest to 0 so the user wil be given options for the next line\n      if (syllableFilter < 1){\n        syllableFilter = 4;\n      }\n      \n    })\n    //set the state for lineOne to lineThree and syllableFilter\n   this.setState({\n     lineOne: lineOne,\n     lineTwo: lineTwo,\n     lineThree: lineThree,\n     syllableFilter: syllableFilter,\n   })\n  }\n\n  //creating a function to remove the last word in the Haiku if the user wants \n  removeLastWord = () => {\n    //copying Haiku\n    const wholeHaikuCopy = [...this.state.wholeHaiku];\n    //removing last word\n    wholeHaikuCopy.pop();\n    //set state to the Haiku without the last word \n    this.setState({\n      wholeHaiku: wholeHaikuCopy,\n    },\n    //make sure it won't crash if the user exits back to the first word \n    () => {\n      this.distributeSyllables();\n      if (wholeHaikuCopy.length === 0) {\n        this.setState({\n          wordOptions: [],\n        })\n        return null;\n      }\n      //calling the API to get word suggestions \n      const newLastWord = wholeHaikuCopy[wholeHaikuCopy.length - 1].word;\n      this.getWordSuggestions(newLastWord);\n    })\n  }  \n\n  //creating a function to display the syllable count \n  syllableDisplay = (currentLine) => {\n    //creating a boolean for when each line is full \n    const lineOneEmpty = this.countSyllables(this.state.lineOne) === 0;\n    const lineOneFull = this.countSyllables(this.state.lineOne) === 5;\n    const lineTwoFull = this.countSyllables(this.state.lineTwo) === 7;\n    const lineThreeFull = this.countSyllables(this.state.lineThree) === 5;\n    \n    //creating conditions for displaying the syllable counts\n    if (lineOneFull && lineTwoFull && lineThreeFull) {\n      // all lines remove syllable display\n      return ([])\n      //if lines one and two are full and we're on the third line\n    } else if (lineOneFull && lineTwoFull && !lineThreeFull) {\n      if (currentLine === this.state.lineThree) {\n        // count current syllables remaining\n        const syllablesRemain = 5 - this.countSyllables(currentLine);\n        // return lineThree's display here\n        return <div><p>{\"You are on Line Three. \" +syllablesRemain + \" syllables remain\"}</p></div>\n      } else {\n        // don't return lineOne or lineTwo's displays here\n        return ([]);\n      }\n      //if line one is full and we're on line two \n    } else if (lineOneFull && !lineTwoFull) {\n      if (currentLine === this.state.lineTwo) {\n        //count current syllables remaining \n        const syllablesRemain = 7 - this.countSyllables(currentLine);\n        // return lineTwo's display here\n        return <div><p>{\"You are on Line Two. \" + syllablesRemain + \" syllables remain\"}</p></div>\n      } else {\n        // don't return lineOne or lineThree's displays here\n        return ([]);\n      }\n      //if line one is not full then display line one syllable count \n    } else if (lineOneEmpty === true) {\n      return ([]);\n    } else if (!lineOneFull) {\n      if (currentLine === this.state.lineOne) {\n        const syllablesRemain = 5 - this.countSyllables(currentLine);\n        // return lineOne's display here\n        return <div><p>{\"You are on Line One. \" + syllablesRemain + \" syllables remain\"}</p></div>\n\n      } else {\n        return ([]);\n      }\n    }\n  }\n\n  convertHaikuToString = () => {\n    // map through lines of haiku, extracting strings from 'word objects'\n    const linesAsArraysOfStrings = [\n      [...this.state.lineOne].map(elt => elt.word),\n      [...this.state.lineTwo].map(elt => elt.word),\n      [...this.state.lineThree].map(elt => elt.word)\n    ]\n\n    // join the words in each line with a space to a string.\n    // concatenate each line string with a newline char.\n    // return output.\n    return linesAsArraysOfStrings.reduce((total, currentLine) => {\n      const joinedLine = currentLine.join(' ');\n      return total === null ? joinedLine : total + '\\n' + joinedLine;\n    }, null)\n  }\n\n  renderHaiku = () => {\n   return [\n      [...this.state.lineOne.map(elt => elt.word)].join(' '),\n      <br />,\n      [...this.state.lineTwo.map(elt => elt.word)].join(' '),\n      <br />,\n       [...this.state.lineThree.map(elt => elt.word)].join(' ')\n    ];\n    \n  }\n\n   \n\n  render() {\n    return (\n     <div className=\"wrapper\">\n          <div className=\"Modal\">\n            <Modal\n              className=\"modal\"\n              show={this.state.isShowing}\n              close={this.closeModalHandler}>\n              <Instructions />\n            </Modal>\n          </div>\n        <header>\n          <h1>Haikus Ahoy!</h1>\n          <img src={compass} alt=\"a compass\" className=\"compass\"/>\n          <div className=\"Form\" id=\"formContainer\">\n          <form action=\"submit\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"word\" className=\"visuallyHidden\">Input Starting Word Here</label>\n                <input className=\"Input\" onChange={this.handleChange} placeholder=\"Enter Your Starting Word\" value={this.state.seedWord} id=\"word\" name=\"word\" type=\"text\" disabled={this.state.wholeHaiku.length > 0 ? true : false}/> \n                <button disabled={this.state.wholeHaiku.length > 0 ? true : false} className=\"Submit\">Submit</button>\n                </form>\n          {/* form */}\n          </div>\n          <img src={ship} alt=\"a ship\" className=\"ship\"/>\n       </header>  \n\n      <div className=\"ContainerHaiku\" id=\"ContainerHaiku\" ref={this.containerRef}>\n      {this.state.wholeHaiku.length > 0 && (\n        <div>\n          <div className=\"Haiku\" id=\"dynamicHaiku\">\n            {this.state.wholeHaiku.length > 0 ? <h2 onSubmit={this.removeLastWord}>Haiku</h2> : null}\n            <div className=\"flexParent\">\n              <div className=\"lines\">\n                \n                <ul className=\"haikuUl\">\n                  {this.state.lineOne.map((result, i) => {\n                    return (<li key={i}><h4>{result.word}</h4></li>)\n                  })}\n                </ul>\n                {\n                  this.syllableDisplay(this.state.lineOne)\n                }\n                {/* lines */}\n              </div>\n              <div className=\"lines\">\n                \n                  <ul className=\"haikuUl\">\n                  {this.state.lineTwo.map((result, i) => {\n                    return (<li key={i}><h4>{result.word}</h4></li>)\n                  }\n                  )}\n                </ul>\n                {\n                  this.syllableDisplay(this.state.lineTwo)\n                }\n\n              </div>\n              <div className=\"lines\">\n                \n                <ul className=\"haikuUl\">\n                  {this.state.lineThree.map((result, i) => {\n                    return (<li key={i}><h4>{result.word}</h4></li>)\n                  }\n                  )}\n                  \n                </ul>\n                  {\n                    this.syllableDisplay(this.state.lineThree)\n                  }\n            </div>\n                  \n            <div>\n              {this.countSyllables(this.state.wholeHaiku) >= 17 ? <button className=\"seePoem\" onClick={this.openPoem}>Click to see whole poem</button> : null}\n              <Haiku\n                className=\"poem\"\n                show={this.state.showPoem}\n                cancel={this.closePoem}\n                refresh={this.refreshPage}>\n                    <p>{this.renderHaiku()}</p>\n              </Haiku>\n            </div>\n          </div>\n        {/* haiku */}\n        </div>   \n        \n        <div className=\"nextWordOption\"> \n          <ul className=\"suggestedWords\">\n            {/* //mapping over the wordOptions array and displaying to the page  */}\n            {this.state.wordOptions.map((result, i) => {\n              return (\n                // Creating an onClick listener for each button appended to the page \n                <li key={i}><button disabled={this.countSyllables(this.state.wholeHaiku) >= 17 ? true : false} onClick={(event) => { this.buttonWordChoice(event, i) }} className=\"wordButton\">\n                  {result.word}\n                </button></li>\n              )\n            })}\n          </ul>\n          {this.state.wholeHaiku.length > 0 ? <button id=\"removeLastItem\" className=\"removeLastItem\" disabled={this.state.showFinishedHaiku} onClick={this.removeLastWord}>Remove Last Word</button> : null}\n        </div>    \n      </div>\n      )}  \n      </div>\n    </div>\n \n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}